The char data type is used to store a single character. 
The character must be surrounded by single quotes, like 'A' or 'c':
-----------------------------------------------------------------------------
A char array is just that - an array of characters:
ex:- char arr[10];
int main() {
   char arr[20];
   cin>>arr;
   cout<<arr;
    return 0;
}
-------------------------------------------------------------------------------
1.If allocated on the stack (like in your example), 
it will always occupy eg. 256 bytes no matter how long the text it contains is
2.If allocated on the heap (using malloc() or new char[]) you're responsible
for releasing the memory afterwards and you will always have the overhead of a heap allocation.
3.If you copy a text of more than 256 chars into the array,
it might crash, produce ugly assertion messages or cause unexplainable (mis-)behavior somewhere else in your program.
4.To determine the text's length, the array has to be scanned, 
character by character, for a \0 character.
-----------------------------------------------------
A string is a class that contains a char array, but automatically manages it for you. 
Most string implementations have a built-in array of 16 characters 
(so short strings don't fragment the heap) and use the heap for longer strings.
=====================================================
Reverse a String
===================================================
string reverseWord(string str){
    int i=0,j=str.size()-1;
    while(i<j)
    {
        swap(str[i++],str[j--]);
        
    }
    
  //Your code here
  return str;
}
=====================================
length of the string
=============================================
int getlength(char c[20])
{
    int count=0;
    for(int i=0;c[i]!='\0';i++)
    {
        count++;
    }
    return count;
}
============================================================================
A sentence is palindrome
=============================================================================
bool isPalindrome(string s) {
        
     if (s.empty()) return true; 
        int z = s.size();
        int i = 0;
        while (i < z) {
            if (!isalnum(s[z])) { z--; continue; }
            if (!isalnum(s[i])) { i++; continue; }   
            if (tolower(s[i++]) != tolower(s[z--])) return false;
        }
        return true;
    }
    =================================
